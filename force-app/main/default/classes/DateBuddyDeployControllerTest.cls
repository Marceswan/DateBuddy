@IsTest(seeAllData=false)
public class DateBuddyDeployControllerTest {
    @IsTest
    static void testGetStatus_returnsCompleted() {
        DateBuddyDeployController.AsyncStatusDTO dto = DateBuddyDeployController.getStatus('abc123');
        System.assertEquals('abc123', dto.id);
        System.assertEquals(true, dto.done);
        System.assertEquals('Completed', dto.state);
        System.assertEquals('Trigger deployed successfully', dto.message);
    }

    @IsTest
    static void testGetDeploymentStatus_returnsCompleted() {
        DateBuddyDeployController.AsyncStatusDTO dto = DateBuddyDeployController.getDeploymentStatus('test123');
        System.assertEquals('test123', dto.id);
        System.assertEquals(true, dto.done);
        System.assertEquals('Completed', dto.state);
        System.assertEquals('Trigger deployed successfully', dto.message);
    }

    @IsTest
    static void testGetDeploymentStatus_blankAsyncIdThrows() {
        try {
            DateBuddyDeployController.getDeploymentStatus('');
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.getDeploymentStatus(null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
    }

    @IsTest
    static void testDeployTrigger_blankObjectNameThrows() {
        try {
            DateBuddyDeployController.deployTrigger('');
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.deployTrigger(null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected  
            System.assert(true, 'AuraHandledException thrown correctly');
        }
    }

    @IsTest
    static void testDeployTrigger_validObjectName() {
        String result = DateBuddyDeployController.deployTrigger('Account');
        System.assertNotEquals(null, result);
        System.assert(result.startsWith('PENDING_'));
    }

    @IsTest
    static void testGetTriggerSource_mirrorsGenerator() {
        String expectedName = 'DateStampTrigger_Task';
        String fromController = DateBuddyDeployController.getTriggerSource('Task');
        System.assert(fromController.contains('trigger ' + expectedName), 'Should contain generated trigger name');
        System.assert(fromController.contains('on Task'));
    }

    @IsTest
    static void testGetTriggerSource_blankObjectThrows() {
        try {
            DateBuddyDeployController.getTriggerSource('');
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.getTriggerSource(null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
    }

    @IsTest
    static void testListSObjects_containsCoreObject() {
        List<String> names = DateBuddyDeployController.listSObjects();
        System.assertNotEquals(null, names, 'Should return a list');
        // Results depend on metadata in the org, so we just validate the structure
    }
    
    @IsTest
    static void testGetObjectsWithStats() {
        Test.startTest();
        List<DateBuddyDeployController.ObjectCardWrapper> result = 
            DateBuddyDeployController.getObjectsWithStats();
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Result should not be null');
        // Results depend on metadata configuration, but we can validate the structure
        for (DateBuddyDeployController.ObjectCardWrapper wrapper : result) {
            System.assertNotEquals(null, wrapper.objectName, 'Object name should not be null');
            System.assertNotEquals(null, wrapper.totalMappings, 'Total mappings should not be null');
            System.assertNotEquals(null, wrapper.entryMappings, 'Entry mappings should not be null');
            System.assertNotEquals(null, wrapper.exitMappings, 'Exit mappings should not be null');
            System.assertNotEquals(null, wrapper.fieldCount, 'Field count should not be null');
            System.assert(wrapper.totalMappings >= 0, 'Total mappings should be non-negative');
            System.assert(wrapper.entryMappings >= 0, 'Entry mappings should be non-negative');
            System.assert(wrapper.exitMappings >= 0, 'Exit mappings should be non-negative');
            System.assert(wrapper.fieldCount >= 0, 'Field count should be non-negative');
        }
    }
    
    @IsTest
    static void testGetObjectFieldMappings() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result = 
            DateBuddyDeployController.getObjectFieldMappings('Contact');
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Result should not be null');
        System.assertEquals('Contact', result.objectName, 'Object name should match');
        System.assertNotEquals(null, result.treeNodes, 'Tree nodes should not be null');
        System.assertNotEquals(null, result.mappingDetails, 'Mapping details should not be null');
    }
    
    @IsTest
    static void testGetObjectFieldMappingsWithData() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result = 
            DateBuddyDeployController.getObjectFieldMappings('Contact');
        Test.stopTest();
        
        if (!result.treeNodes.isEmpty()) {
            DateBuddyDeployController.TreeNode firstNode = result.treeNodes[0];
            System.assertNotEquals(null, firstNode.label, 'Tree node label should not be null');
            System.assertNotEquals(null, firstNode.name, 'Tree node name should not be null');
            System.assertNotEquals(null, firstNode.expanded, 'Tree node expanded should not be null');
            
            if (firstNode.items != null && !firstNode.items.isEmpty()) {
                DateBuddyDeployController.TreeNode childNode = firstNode.items[0];
                System.assertNotEquals(null, childNode.label, 'Child node label should not be null');
                System.assertNotEquals(null, childNode.name, 'Child node name should not be null');
            }
        }
        
        if (!result.mappingDetails.isEmpty()) {
            DateBuddyDeployController.MappingDetail firstMapping = result.mappingDetails[0];
            System.assertNotEquals(null, firstMapping.picklistField, 'Picklist field should not be null');
            System.assertNotEquals(null, firstMapping.picklistValue, 'Picklist value should not be null');
            System.assertNotEquals(null, firstMapping.direction, 'Direction should not be null');
            System.assertNotEquals(null, firstMapping.dateField, 'Date field should not be null');
        }
    }
    
    @IsTest
    static void testGetObjectFieldMappingsInvalidObject() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result = 
            DateBuddyDeployController.getObjectFieldMappings('InvalidObject');
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Result should not be null even for invalid object');
        System.assertEquals('InvalidObject', result.objectName, 'Object name should match input');
        System.assertNotEquals(null, result.treeNodes, 'Tree nodes should not be null');
        System.assertNotEquals(null, result.mappingDetails, 'Mapping details should not be null');
        System.assertEquals(0, result.mappingDetails.size(), 'Should have no mappings for invalid object');
    }
    
    @IsTest
    static void testGetObjectFieldMappingsNullObject() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result = 
            DateBuddyDeployController.getObjectFieldMappings(null);
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Result should handle null gracefully');
        System.assertEquals(null, result.objectName, 'Object name should be null');
        System.assertNotEquals(null, result.treeNodes, 'Tree nodes should not be null');
        System.assertNotEquals(null, result.mappingDetails, 'Mapping details should not be null');
        System.assertEquals(0, result.treeNodes.size(), 'Should have no tree nodes for null object');
        System.assertEquals(0, result.mappingDetails.size(), 'Should have no mappings for null object');
    }

    @IsTest
    static void testGetObjectFieldMappingsBlankObject() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result = 
            DateBuddyDeployController.getObjectFieldMappings('');
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Result should handle blank gracefully');
        System.assertEquals('', result.objectName, 'Object name should be blank');
        System.assertNotEquals(null, result.treeNodes, 'Tree nodes should not be null');
        System.assertNotEquals(null, result.mappingDetails, 'Mapping details should not be null');
        System.assertEquals(0, result.treeNodes.size(), 'Should have no tree nodes for blank object');
        System.assertEquals(0, result.mappingDetails.size(), 'Should have no mappings for blank object');
    }
    
    @IsTest
    static void testCachingBehavior() {
        Test.startTest();
        List<DateBuddyDeployController.ObjectCardWrapper> result1 = 
            DateBuddyDeployController.getObjectsWithStats();
        
        List<DateBuddyDeployController.ObjectCardWrapper> result2 = 
            DateBuddyDeployController.getObjectsWithStats();
        Test.stopTest();
        
        System.assertEquals(result1.size(), result2.size(), 'Cached results should have same size');
        if (!result1.isEmpty() && !result2.isEmpty()) {
            System.assertEquals(result1[0].objectName, result2[0].objectName, 'Cached object names should match');
            System.assertEquals(result1[0].totalMappings, result2[0].totalMappings, 'Cached mappings should match');
        }
    }
    
    @IsTest
    static void testFieldMappingCaching() {
        Test.startTest();
        DateBuddyDeployController.FieldMappingWrapper result1 = 
            DateBuddyDeployController.getObjectFieldMappings('Contact');
        
        DateBuddyDeployController.FieldMappingWrapper result2 = 
            DateBuddyDeployController.getObjectFieldMappings('Contact');
        Test.stopTest();
        
        System.assertEquals(result1.objectName, result2.objectName, 'Cached object names should match');
        System.assertEquals(result1.treeNodes.size(), result2.treeNodes.size(), 'Cached tree nodes should match');
        System.assertEquals(result1.mappingDetails.size(), result2.mappingDetails.size(), 'Cached mappings should match');
    }
    
    @IsTest
    static void testWrapperClassInstantiation() {
        // Test default constructors
        DateBuddyDeployController.ObjectCardWrapper cardWrapper = 
            new DateBuddyDeployController.ObjectCardWrapper();
        cardWrapper.objectName = 'TestObject';
        cardWrapper.totalMappings = 10;
        cardWrapper.entryMappings = 5;
        cardWrapper.exitMappings = 5;
        cardWrapper.fieldCount = 3;
        
        System.assertEquals('TestObject', cardWrapper.objectName);
        System.assertEquals(10, cardWrapper.totalMappings);
        System.assertEquals(5, cardWrapper.entryMappings);
        System.assertEquals(5, cardWrapper.exitMappings);
        System.assertEquals(3, cardWrapper.fieldCount);
        
        DateBuddyDeployController.FieldMappingWrapper fieldWrapper = 
            new DateBuddyDeployController.FieldMappingWrapper();
        fieldWrapper.objectName = 'TestObject';
        fieldWrapper.treeNodes = new List<DateBuddyDeployController.TreeNode>();
        fieldWrapper.mappingDetails = new List<DateBuddyDeployController.MappingDetail>();
        
        System.assertEquals('TestObject', fieldWrapper.objectName);
        System.assertNotEquals(null, fieldWrapper.treeNodes);
        System.assertNotEquals(null, fieldWrapper.mappingDetails);
        
        DateBuddyDeployController.TreeNode treeNode = 
            new DateBuddyDeployController.TreeNode();
        treeNode.label = 'Test Field';
        treeNode.name = 'Test_Field__c';
        treeNode.expanded = true;
        treeNode.items = new List<DateBuddyDeployController.TreeNode>();
        
        System.assertEquals('Test Field', treeNode.label);
        System.assertEquals('Test_Field__c', treeNode.name);
        System.assertEquals(true, treeNode.expanded);
        System.assertNotEquals(null, treeNode.items);
        
        DateBuddyDeployController.MappingDetail mappingDetail = 
            new DateBuddyDeployController.MappingDetail();
        mappingDetail.picklistField = 'Status__c';
        mappingDetail.picklistValue = 'Active';
        mappingDetail.direction = 'Entered';
        mappingDetail.dateField = 'Date_Entered_Active__c';
        
        System.assertEquals('Status__c', mappingDetail.picklistField);
        System.assertEquals('Active', mappingDetail.picklistValue);
        System.assertEquals('Entered', mappingDetail.direction);
        System.assertEquals('Date_Entered_Active__c', mappingDetail.dateField);
    }

    @IsTest
    static void testWrapperClassParameterizedConstructors() {
        // Test parameterized constructors to cover lines 50-53, 71-76, 89-99
        DateBuddyDeployController.ObjectCardWrapper cardWrapper = 
            new DateBuddyDeployController.ObjectCardWrapper('Account', 15, 8, 7, 4);
        
        System.assertEquals('Account', cardWrapper.objectName);
        System.assertEquals(15, cardWrapper.totalMappings);
        System.assertEquals(8, cardWrapper.entryMappings);
        System.assertEquals(7, cardWrapper.exitMappings);
        System.assertEquals(4, cardWrapper.fieldCount);
        
        List<DateBuddyDeployController.TreeNode> testTreeNodes = new List<DateBuddyDeployController.TreeNode>();
        List<DateBuddyDeployController.MappingDetail> testMappingDetails = new List<DateBuddyDeployController.MappingDetail>();
        
        DateBuddyDeployController.FieldMappingWrapper fieldWrapper = 
            new DateBuddyDeployController.FieldMappingWrapper('Contact', testTreeNodes, testMappingDetails);
        
        System.assertEquals('Contact', fieldWrapper.objectName);
        System.assertEquals(testTreeNodes, fieldWrapper.treeNodes);
        System.assertEquals(testMappingDetails, fieldWrapper.mappingDetails);
        
        DateBuddyDeployController.TreeNode treeNode = 
            new DateBuddyDeployController.TreeNode('Lead Source', 'LeadSource', true);
        
        System.assertEquals('Lead Source', treeNode.label);
        System.assertEquals('LeadSource', treeNode.name);
        System.assertEquals(true, treeNode.expanded);
        System.assertNotEquals(null, treeNode.items);
        
        DateBuddyDeployController.MappingDetail mappingDetail = 
            new DateBuddyDeployController.MappingDetail('test123', 'Stage__c', 'Closed Won', 'Date_Won__c', 'Entered');
        
        System.assertEquals('test123', mappingDetail.id);
        System.assertEquals('Stage__c', mappingDetail.picklistField);
        System.assertEquals('Closed Won', mappingDetail.picklistValue);
        System.assertEquals('Date_Won__c', mappingDetail.dateField);
        System.assertEquals('Entered', mappingDetail.direction);
    }
    
    @IsTest
    static void testGetObjectPicklistFields() {
        Test.startTest();
        List<Map<String, String>> fields = DateBuddyDeployController.getObjectPicklistFields('Contact');
        Test.stopTest();
        
        System.assertNotEquals(null, fields, 'Fields list should not be null');
        
        for(Map<String, String> field : fields) {
            System.assert(field.containsKey('label'), 'Field should have a label');
            System.assert(field.containsKey('value'), 'Field should have a value');
        }
    }

    @IsTest
    static void testGetObjectPicklistFieldsBlankObject() {
        Test.startTest();
        List<Map<String, String>> fields = DateBuddyDeployController.getObjectPicklistFields('');
        Test.stopTest();
        
        System.assertNotEquals(null, fields, 'Fields list should not be null');
        System.assertEquals(0, fields.size(), 'Should return empty list for blank object');
        
        List<Map<String, String>> fieldsNull = DateBuddyDeployController.getObjectPicklistFields(null);
        System.assertNotEquals(null, fieldsNull, 'Fields list should not be null for null input');
        System.assertEquals(0, fieldsNull.size(), 'Should return empty list for null object');
    }

    @IsTest
    static void testGetObjectPicklistFieldsInvalidObject() {
        Test.startTest();
        List<Map<String, String>> fields = DateBuddyDeployController.getObjectPicklistFields('InvalidObject__c');
        Test.stopTest();
        
        System.assertNotEquals(null, fields, 'Fields list should not be null');
        System.assertEquals(0, fields.size(), 'Should return empty list for invalid object');
    }
    
    @IsTest
    static void testGetPicklistValues() {
        Test.startTest();
        List<Map<String, String>> values = DateBuddyDeployController.getPicklistValues('Contact', 'LeadSource');
        Test.stopTest();
        
        System.assertNotEquals(null, values, 'Values list should not be null');
        
        for(Map<String, String> value : values) {
            System.assert(value.containsKey('label'), 'Value should have a label');
            System.assert(value.containsKey('value'), 'Value should have a value');
        }
    }

    @IsTest
    static void testGetPicklistValuesBlankParameters() {
        Test.startTest();
        List<Map<String, String>> values1 = DateBuddyDeployController.getPicklistValues('', 'LeadSource');
        List<Map<String, String>> values2 = DateBuddyDeployController.getPicklistValues('Contact', '');
        List<Map<String, String>> values3 = DateBuddyDeployController.getPicklistValues(null, 'LeadSource');
        List<Map<String, String>> values4 = DateBuddyDeployController.getPicklistValues('Contact', null);
        Test.stopTest();
        
        System.assertEquals(0, values1.size(), 'Should return empty list for blank object');
        System.assertEquals(0, values2.size(), 'Should return empty list for blank field');
        System.assertEquals(0, values3.size(), 'Should return empty list for null object');
        System.assertEquals(0, values4.size(), 'Should return empty list for null field');
    }

    @IsTest
    static void testGetPicklistValuesInvalidParameters() {
        Test.startTest();
        List<Map<String, String>> values1 = DateBuddyDeployController.getPicklistValues('InvalidObject__c', 'LeadSource');
        List<Map<String, String>> values2 = DateBuddyDeployController.getPicklistValues('Contact', 'InvalidField__c');
        Test.stopTest();
        
        System.assertEquals(0, values1.size(), 'Should return empty list for invalid object');
        System.assertEquals(0, values2.size(), 'Should return empty list for invalid field');
    }
    
    @IsTest
    static void testGenerateTriggerCode() {
        List<String> selectedValues = new List<String>{'Web', 'Phone Inquiry'};
        
        Test.startTest();
        String triggerCode = DateBuddyDeployController.generateTriggerCode(
            'Contact', 
            'LeadSource',
            selectedValues,
            'Date_Entered_',
            'Date_Exited_'
        );
        Test.stopTest();
        
        System.assertNotEquals(null, triggerCode, 'Trigger code should not be null');
        System.assert(triggerCode.contains('trigger'), 'Should contain trigger keyword');
        System.assert(triggerCode.contains('LeadSource'), 'Should contain field name');
        System.assert(triggerCode.contains('Date_Entered_'), 'Should contain entry prefix');
        System.assert(triggerCode.contains('Date_Exited_'), 'Should contain exit prefix');
    }

    @IsTest
    static void testGenerateTriggerCodeBlankParameters() {
        try {
            DateBuddyDeployController.generateTriggerCode('', 'LeadSource', null, null, null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.generateTriggerCode('Contact', '', null, null, null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.generateTriggerCode(null, 'LeadSource', null, null, null);
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
    }

    @IsTest
    static void testGenerateTriggerCodeOptionalParameters() {
        Test.startTest();
        String triggerCode1 = DateBuddyDeployController.generateTriggerCode('Contact', 'LeadSource', null, null, null);
        String triggerCode2 = DateBuddyDeployController.generateTriggerCode('Contact', 'LeadSource', new List<String>(), '', '');
        Test.stopTest();
        
        System.assertNotEquals(null, triggerCode1, 'Trigger code should not be null with null optional params');
        System.assertNotEquals(null, triggerCode2, 'Trigger code should not be null with empty optional params');
        System.assert(triggerCode1.contains('trigger'), 'Should contain trigger keyword');
        System.assert(triggerCode2.contains('trigger'), 'Should contain trigger keyword');
    }
    
    @IsTest
    static void testDeployTrigger() {
        String mockTriggerCode = 'trigger TestTrigger on Contact (before update) { }';
        String mockTestCode = '@isTest class TestTriggerTest { }';
        
        Test.startTest();
        String result = DateBuddyDeployController.deployTrigger(
            mockTriggerCode,
            mockTestCode,
            'Contact',
            'TestField'
        );
        Test.stopTest();
        
        System.assertNotEquals(null, result, 'Deploy result should not be null');
        System.assert(result.startsWith('DEPLOYMENT_ID_'), 'Should return deployment ID');
    }

    @IsTest
    static void testDeployTriggerBlankTriggerCode() {
        try {
            DateBuddyDeployController.deployTrigger('', 'test', 'Contact', 'Field');
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
        
        try {
            DateBuddyDeployController.deployTrigger(null, 'test', 'Contact', 'Field');
            System.assert(false, 'Expected AuraHandledException');
        } catch (AuraHandledException e) {
            // AuraHandledException thrown as expected
            System.assert(true, 'AuraHandledException thrown correctly');
        }
    }

    @IsTest
    static void testAsyncStatusDTO() {
        // Test AsyncStatusDTO properties
        DateBuddyDeployController.AsyncStatusDTO dto = new DateBuddyDeployController.AsyncStatusDTO();
        dto.id = 'test123';
        dto.state = 'InProgress';
        dto.done = false;
        dto.statusCode = 'PENDING';
        dto.message = 'Deployment in progress';
        
        System.assertEquals('test123', dto.id);
        System.assertEquals('InProgress', dto.state);
        System.assertEquals(false, dto.done);
        System.assertEquals('PENDING', dto.statusCode);
        System.assertEquals('Deployment in progress', dto.message);
    }

    @IsTest 
    static void testErrorHandlingScenarios() {
        // Test scenarios that might cause exceptions to increase coverage of catch blocks
        Test.startTest();
        
        // This should handle potential exceptions gracefully
        try {
            List<DateBuddyDeployController.ObjectCardWrapper> result = 
                DateBuddyDeployController.getObjectsWithStats();
            System.assertNotEquals(null, result, 'Should handle gracefully');
        } catch (Exception e) {
            System.assert(e instanceof AuraHandledException, 'Should wrap in AuraHandledException');
        }
        
        try {
            DateBuddyDeployController.FieldMappingWrapper result = 
                DateBuddyDeployController.getObjectFieldMappings('TestObject');
            System.assertNotEquals(null, result, 'Should handle gracefully');
        } catch (Exception e) {
            System.assert(e instanceof AuraHandledException, 'Should wrap in AuraHandledException');
        }
        
        Test.stopTest();
    }

    @IsTest
    static void testListSObjectsComprehensive() {
        Test.startTest();
        List<String> objects = DateBuddyDeployController.listSObjects();
        Test.stopTest();
        
        System.assertNotEquals(null, objects, 'Should return a list');
        
        // Test that returned objects are sorted
        if (objects.size() > 1) {
            for (Integer i = 1; i < objects.size(); i++) {
                String current = objects[i];
                String previous = objects[i-1];
                System.assert(current.compareTo(previous) >= 0, 'Objects should be sorted: ' + previous + ' vs ' + current);
            }
        }
    }

    // Additional test to ensure we hit various conditional branches
    @IsTest
    static void testComplexMappingScenarios() {
        // This test helps ensure we cover various conditional branches in the getObjectFieldMappings method
        Test.startTest();
        
        // Test with different object types that might have different field configurations
        List<String> testObjects = new List<String>{'Account', 'Contact', 'Opportunity', 'Case', 'Lead'};
        
        for (String objectName : testObjects) {
            DateBuddyDeployController.FieldMappingWrapper result = 
                DateBuddyDeployController.getObjectFieldMappings(objectName);
            
            System.assertNotEquals(null, result, 'Result should not be null for ' + objectName);
            System.assertEquals(objectName, result.objectName, 'Object name should match for ' + objectName);
            
            // Validate tree structure
            for (DateBuddyDeployController.TreeNode node : result.treeNodes) {
                System.assertNotEquals(null, node.label, 'Tree node label should not be null');
                System.assertNotEquals(null, node.name, 'Tree node name should not be null');
                System.assertNotEquals(null, node.items, 'Tree node items should not be null');
                
                for (DateBuddyDeployController.TreeNode childNode : node.items) {
                    System.assertNotEquals(null, childNode.label, 'Child node label should not be null');
                    System.assertNotEquals(null, childNode.name, 'Child node name should not be null');
                }
            }
            
            // Validate mapping details
            for (DateBuddyDeployController.MappingDetail detail : result.mappingDetails) {
                System.assertNotEquals(null, detail.picklistField, 'Picklist field should not be null');
                System.assertNotEquals(null, detail.direction, 'Direction should not be null');
                System.assert(detail.direction == 'Entered' || detail.direction == 'Exited', 
                    'Direction should be Entered or Exited: ' + detail.direction);
            }
        }
        
        Test.stopTest();
    }

    @IsTest
    static void testDirectionalMappingLogic() {
        // Test to specifically cover the conditional branches in getObjectsWithStats mapping logic
        // This test focuses on covering lines around direction determination
        Test.startTest();
        
        // Call methods that exercise the direction-based conditional logic
        List<DateBuddyDeployController.ObjectCardWrapper> objectsWithStats = 
            DateBuddyDeployController.getObjectsWithStats();
        
        // Test all possible combinations to ensure we hit different branches
        for (DateBuddyDeployController.ObjectCardWrapper wrapper : objectsWithStats) {
            System.assertNotEquals(null, wrapper.objectName, 'Object name should be set');
            
            // Verify calculations are logical
            System.assert(wrapper.totalMappings >= wrapper.entryMappings, 
                'Total should be >= entry mappings for ' + wrapper.objectName);
            System.assert(wrapper.totalMappings >= wrapper.exitMappings, 
                'Total should be >= exit mappings for ' + wrapper.objectName);
            
            // Test edge cases for field count
            System.assert(wrapper.fieldCount <= wrapper.totalMappings, 
                'Field count should be <= total mappings for ' + wrapper.objectName);
        }
        
        Test.stopTest();
    }
}